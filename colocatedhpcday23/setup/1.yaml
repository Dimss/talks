apiVersion: apps/v1
kind: Deployment
metadata:
  name: mnist-gpu-1
spec:
  selector:
    matchLabels:
      app: mnist-gpu-1
  template:
    metadata:
      labels:
        app: mnist-gpu-1
    spec:
      containers:
      - name: mnist-gpu-1
        image: tensorflow/tensorflow:latest-gpu
        command:
          - python
          - -c
          - |
            import sys
            import tensorflow as tf
            
            gpus = tf.config.list_physical_devices('GPU')
            if not gpus:
                print("no gpus founds!")
                sys.exit()
            
            tf.config.experimental.set_visible_devices(gpus[0], 'GPU')
            tf.config.set_logical_device_configuration(gpus[0], [tf.config.LogicalDeviceConfiguration(memory_limit=2048)])
            
            mnist = tf.keras.datasets.mnist
            (x_train, y_train), (x_test, y_test) = mnist.load_data()
            x_train, x_test = x_train / 255.0, x_test / 255.0
            
            model = tf.keras.models.Sequential([
                tf.keras.layers.Flatten(input_shape=(28, 28)),
                tf.keras.layers.Dense(128, activation='relu'),
                tf.keras.layers.Dropout(0.2),
                tf.keras.layers.Dense(10)
            ])
            
            predictions = model(x_train[:1]).numpy()
            tf.nn.softmax(predictions).numpy()
            model.compile(optimizer=tf.keras.optimizers.Adam(0.001),
                          loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
                          metrics=[tf.keras.metrics.SparseCategoricalAccuracy()])
            model.fit(x_train, y_train, epochs=10000)
        resources:
          limits:
            nvidia.com/gpu: "1"
        volumeMounts:
        - name: lib
          mountPath: /lib/hostlibs
        env:
          - name: LD_LIBRARY_PATH
            value: /lib/hostlibs
      volumes:
      - name: lib
        hostPath:
          path: /lib/x86_64-linux-gnu/
          type: Directory